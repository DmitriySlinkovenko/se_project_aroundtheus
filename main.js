!function(){"use strict";var e=class{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputEls.forEach((e=>{this._hideInputError(e)}))}},t=class{constructor(e,t,s,i,n){this._name=e.name,this._link=e.link,this._templateSelector=t,this._handleImageClick=s,this._handleDeleteButton=i,this._id=e._id,this._handleLike=n,this._isLiked=e.isLiked}_setEventListeners(){this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__remove-button"),this._likeButton.addEventListener("click",(()=>this._handleLike(this))),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteButton(this.getId(),this._element)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)}))}getId(){return this._id}setIsLiked(e){this._isLiked=e,this._renderLikes()}isLiked(){return this._isLiked}_renderLikes(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}_getTemplate(){return document.querySelector(this._templateSelector).content.firstElementChild.cloneNode(!0)}generateCard(){return this._element=this._getTemplate(),this._cardImage=this._element.querySelector(".card__image"),this._cardTitle=this._element.querySelector(".card__title"),this._cardImage.src=this._link,this._cardTitle.textContent=this._name,this._cardImage.alt=this._name,this._setEventListeners(),this._renderLikes(),this._element}};const s=document.querySelector(".profile__edit-button"),i=document.querySelector(".profile__add-button"),n=document.querySelector("#avatar-edit"),r=(document.querySelector("#input__image_title"),document.querySelector("#input__image_link"),document.querySelector("#profile-submit__form")),o=document.querySelector("#image-submit__form"),a=document.querySelector("#avatar-edit-form"),l=document.querySelector("#verification-form"),c={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__save-button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"};class h{constructor(e){this._modalElement=document.querySelector(e)}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscapeClose)}close(){this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscapeClose)}_handleEscapeClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._modalElement.querySelector(".modal__close-button").addEventListener("click",(()=>{this.close()})),this._modalElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()}))}}class d extends h{constructor(e,t){super(e),this._modalForm=this._modalElement.querySelector(".form"),this._handleFormSubmit=t,this._inputList=this._modalElement.querySelectorAll(".form__input"),this._submitButton=this._modalForm.querySelector(".form__save-button")}_getInputValues(){const e={};return this._inputList.forEach((t=>{let{name:s,value:i}=t;e[s]=i})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:"Save"}setEventListeners(){super.setEventListeners(),this._modalElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()}))}}const u=new class{constructor(e){let{profileName:t,profileDescription:s,profileAvatar:i}=e;this._profileName=document.querySelector(t),this._profileDescription=document.querySelector(s),this._avatar=document.querySelector(i)}getUserInfo(){return this._user={name:this._profileName.textContent,about:this._profileDescription.textContent},this._user}setUserInfo(e){let{name:t,about:s}=e;this._profileName.textContent=t,this._profileDescription.textContent=s}setAvatar(e){this._avatar.src=e}}({profileName:".profile__title",profileDescription:".profile__subtitle",profileAvatar:".profile__avatar"}),_=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._url=t,this._header=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._url}/cards`,{headers:this._header}).then((e=>this._checkResponse(e)))}getUserInfo(){return fetch(`${this._url}/users/me`,{headers:this._header}).then((e=>this._checkResponse(e)))}updateUserProfile(e){let{name:t,about:s}=e;return fetch(`${this._url}/users/me`,{method:"PATCH",headers:this._header,body:JSON.stringify({name:`${t}`,about:`${s}`})}).then((e=>this._checkResponse(e)))}updateAvatar(e){let{link:t}=e;return fetch(`${this._url}/users/me/avatar`,{method:"PATCH",headers:this._header,body:JSON.stringify({avatar:`${t}`})}).then((e=>this._checkResponse(e)))}addCard(e){let{name:t,link:s}=e;return fetch(`${this._url}/cards`,{method:"POST",headers:this._header,body:JSON.stringify({name:t,link:s})}).then((e=>this._checkResponse(e)))}deleteCard(e){return fetch(`${this._url}/cards/${e}`,{method:"DELETE",headers:this._header}).then((e=>this._checkResponse(e)))}likeCard(e){return fetch(`${this._url}/cards/${e}/likes`,{method:"PUT",headers:this._header}).then((e=>this._checkResponse(e)))}dislikeCard(e){return fetch(`${this._url}/cards/${e}/likes`,{method:"DELETE",headers:this._header}).then((e=>this._checkResponse(e)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"6e2733e6-8f97-40f4-b18f-c832cf63bc4b","Content-Type":"application/json"}}),m=new class extends h{constructor(e){super(e),this._imageElement=this._modalElement.querySelector(".modal__card-preview_image"),this._imageTitle=this._modalElement.querySelector(".modal__preview_heading")}open(e){this._imageElement.src=e.link,this._imageTitle.textContent=e.name,this._imageElement.alt=e.name,super.open()}}("#preview-image-modal");m.setEventListeners();const p=(e,t)=>{m.open({name:e,link:t})},v=new d("#edit__modal",(function(e){let{name:t,about:s}=e;v.setLoading(!0),_.updateUserProfile({name:t,about:s}).then((()=>{u.setUserInfo({name:t,about:s})})).then((()=>{v.setLoading(!1),v.close()})).catch((e=>{console.error(e)}))}));v.setEventListeners(),s.addEventListener("click",(()=>{v.open();const e=u.getUserInfo();v.setInputValues(e),C.resetValidation()}));const f=new d("#avatar-change-modal",(function(e){let{link:t}=e;f.setLoading(!0),_.updateAvatar({link:t}).then((()=>{u.setAvatar(t)})).then((()=>{f.setLoading(!1),f.close()})).catch((e=>{console.error(e)}))}));f.setEventListeners(),n.addEventListener("click",(()=>{f.open()})),_.getUserInfo().then((e=>{u.setUserInfo(e),u.setAvatar(e.avatar)})).catch((e=>{console.error(e)}));const k=new d("#add-card__modal",(function(e){k.setLoading(!0,"Saving..."),_.addCard(e).then((()=>{y(e)})).then((()=>{k.setLoading(!1),o.reset(),I.resetValidation(),k.close()})).catch((e=>{console.error(e)}))}));function E(e){e.isLiked()?_.dislikeCard(e._id).then((t=>e.setIsLiked(t.isLiked))).catch((e=>console.error(e))):_.likeCard(e._id).then((t=>e.setIsLiked(t.isLiked))).catch((e=>console.error(e)))}k.setEventListeners(),i.addEventListener("click",(()=>{k.open()}));const L=new class extends h{constructor(e,t){super(e),this._modalForm=this._modalElement.querySelector(".form"),this._handleCardDelete=t,this._submitButton=this._modalForm.querySelector(".form__save-button")}setEventListeners(){super.setEventListeners(),this._modalElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleCardDelete(this)}))}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:"Save"}}("#verification-modal",g);function g(e,t){L.open(),l.addEventListener("submit",(()=>{L.setLoading(!0,"Deleting..."),_.deleteCard(e).then((()=>t.remove())).then((()=>{L.setLoading(!1),L.close()})).catch((e=>{console.error(e)}))}))}L.setEventListeners();const b=new class{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>this._renderer(e)))}addItem(e){this._container.append(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:e=>{const t=S(e);b.addItem(t)}},".elements");function S(e){return new t(e,"#card-template",p,g,E).generateCard()}function y(e){const t=S(e);b.addItem(t)}_.getInitialCards().then((e=>{e.forEach((e=>{y(e)}))})).catch((e=>{console.error(e)}));const C=new e(c,r),I=new e(c,o),w=new e(c,a);C.enableValidation(),I.enableValidation(),w.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,